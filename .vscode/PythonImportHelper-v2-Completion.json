[
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "NullPool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose.jwt",
        "description": "jose.jwt",
        "isExtraImport": true,
        "detail": "jose.jwt",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationInfo",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "anonymous_chat.config",
        "description": "anonymous_chat.config",
        "isExtraImport": true,
        "detail": "anonymous_chat.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "anonymous_chat.config",
        "description": "anonymous_chat.config",
        "isExtraImport": true,
        "detail": "anonymous_chat.config",
        "documentation": {}
    },
    {
        "label": "UsersDAO",
        "importPath": "anonymous_chat.users.dao",
        "description": "anonymous_chat.users.dao",
        "isExtraImport": true,
        "detail": "anonymous_chat.users.dao",
        "documentation": {}
    },
    {
        "label": "UsersDAO",
        "importPath": "anonymous_chat.users.dao",
        "description": "anonymous_chat.users.dao",
        "isExtraImport": true,
        "detail": "anonymous_chat.users.dao",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "importPath": "anonymous_chat.users.models",
        "description": "anonymous_chat.users.models",
        "isExtraImport": true,
        "detail": "anonymous_chat.users.models",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "anonymous_chat.users.models",
        "description": "anonymous_chat.users.models",
        "isExtraImport": true,
        "detail": "anonymous_chat.users.models",
        "documentation": {}
    },
    {
        "label": "CannotContainUsername",
        "importPath": "anonymous_chat.Exceptions",
        "description": "anonymous_chat.Exceptions",
        "isExtraImport": true,
        "detail": "anonymous_chat.Exceptions",
        "documentation": {}
    },
    {
        "label": "UserAlreadyExistException",
        "importPath": "anonymous_chat.Exceptions",
        "description": "anonymous_chat.Exceptions",
        "isExtraImport": true,
        "detail": "anonymous_chat.Exceptions",
        "documentation": {}
    },
    {
        "label": "IncorrectEmailOrPasswordException",
        "importPath": "anonymous_chat.Exceptions",
        "description": "anonymous_chat.Exceptions",
        "isExtraImport": true,
        "detail": "anonymous_chat.Exceptions",
        "documentation": {}
    },
    {
        "label": "BaseDAO",
        "importPath": "anonymous_chat.dao.base",
        "description": "anonymous_chat.dao.base",
        "isExtraImport": true,
        "detail": "anonymous_chat.dao.base",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "current_time",
        "importPath": "anyio",
        "description": "anyio",
        "isExtraImport": true,
        "detail": "anyio",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "anonymous_chat.database",
        "description": "anonymous_chat.database",
        "isExtraImport": true,
        "detail": "anonymous_chat.database",
        "documentation": {}
    },
    {
        "label": "authenticate_user",
        "importPath": "anonymous_chat.users.auth",
        "description": "anonymous_chat.users.auth",
        "isExtraImport": true,
        "detail": "anonymous_chat.users.auth",
        "documentation": {}
    },
    {
        "label": "create_acces_token",
        "importPath": "anonymous_chat.users.auth",
        "description": "anonymous_chat.users.auth",
        "isExtraImport": true,
        "detail": "anonymous_chat.users.auth",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "anonymous_chat.users.auth",
        "description": "anonymous_chat.users.auth",
        "isExtraImport": true,
        "detail": "anonymous_chat.users.auth",
        "documentation": {}
    },
    {
        "label": "SUserRegister",
        "importPath": "anonymous_chat.users.schemas",
        "description": "anonymous_chat.users.schemas",
        "isExtraImport": true,
        "detail": "anonymous_chat.users.schemas",
        "documentation": {}
    },
    {
        "label": "SVerifyPhone",
        "importPath": "anonymous_chat.users.schemas",
        "description": "anonymous_chat.users.schemas",
        "isExtraImport": true,
        "detail": "anonymous_chat.users.schemas",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "FastAPICache",
        "importPath": "fastapi_cache",
        "description": "fastapi_cache",
        "isExtraImport": true,
        "detail": "fastapi_cache",
        "documentation": {}
    },
    {
        "label": "RedisBackend",
        "importPath": "fastapi_cache.backends.redis",
        "description": "fastapi_cache.backends.redis",
        "isExtraImport": true,
        "detail": "fastapi_cache.backends.redis",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "importPath": "redis",
        "description": "redis",
        "isExtraImport": true,
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "BaseDAO",
        "kind": 6,
        "importPath": "anonymous_chat.dao.base",
        "description": "anonymous_chat.dao.base",
        "peekOfCode": "class BaseDAO:\n    model = None\n    @classmethod\n    async def find_by_id(cls, model_id: int, db: Session = Depends(get_db)):\n        query = select(cls.model).filter_by(id=model_id)\n        result = await db.execute(query)\n        return result.scalar_one_or_none()\n    @classmethod\n    async def find_one_or_none(cls, db: Session = Depends(get_db), **filter_by):\n        query = select(cls.model).filter_by(**filter_by)",
        "detail": "anonymous_chat.dao.base",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "kind": 2,
        "importPath": "anonymous_chat.users.auth",
        "description": "anonymous_chat.users.auth",
        "peekOfCode": "def get_password_hash(password: str) -> str:\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef create_acces_token(data: dict) -> str:\n    to_encode = data.copy()\n    expire = datetime.now(timezone.utc) + timedelta(minutes=120)\n    to_encode.update({\"exp\": expire, \"sub\": data.get(\"email\")})\n    encoded_jwt = jwt.encode(\n        to_encode, settings.SECRET_KEY, settings.ALGORITHM",
        "detail": "anonymous_chat.users.auth",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "anonymous_chat.users.auth",
        "description": "anonymous_chat.users.auth",
        "peekOfCode": "def verify_password(plain_password, hashed_password) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef create_acces_token(data: dict) -> str:\n    to_encode = data.copy()\n    expire = datetime.now(timezone.utc) + timedelta(minutes=120)\n    to_encode.update({\"exp\": expire, \"sub\": data.get(\"email\")})\n    encoded_jwt = jwt.encode(\n        to_encode, settings.SECRET_KEY, settings.ALGORITHM\n    )\n    return encoded_jwt",
        "detail": "anonymous_chat.users.auth",
        "documentation": {}
    },
    {
        "label": "create_acces_token",
        "kind": 2,
        "importPath": "anonymous_chat.users.auth",
        "description": "anonymous_chat.users.auth",
        "peekOfCode": "def create_acces_token(data: dict) -> str:\n    to_encode = data.copy()\n    expire = datetime.now(timezone.utc) + timedelta(minutes=120)\n    to_encode.update({\"exp\": expire, \"sub\": data.get(\"email\")})\n    encoded_jwt = jwt.encode(\n        to_encode, settings.SECRET_KEY, settings.ALGORITHM\n    )\n    return encoded_jwt\nasync def verify_token(token: str) -> TokenData:\n    try:",
        "detail": "anonymous_chat.users.auth",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "anonymous_chat.users.auth",
        "description": "anonymous_chat.users.auth",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef get_password_hash(password: str) -> str:\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef create_acces_token(data: dict) -> str:\n    to_encode = data.copy()\n    expire = datetime.now(timezone.utc) + timedelta(minutes=120)\n    to_encode.update({\"exp\": expire, \"sub\": data.get(\"email\")})\n    encoded_jwt = jwt.encode(",
        "detail": "anonymous_chat.users.auth",
        "documentation": {}
    },
    {
        "label": "UsersDAO",
        "kind": 6,
        "importPath": "anonymous_chat.users.dao",
        "description": "anonymous_chat.users.dao",
        "peekOfCode": "class UsersDAO(BaseDAO):\n    model = Users",
        "detail": "anonymous_chat.users.dao",
        "documentation": {}
    },
    {
        "label": "Users",
        "kind": 6,
        "importPath": "anonymous_chat.users.models",
        "description": "anonymous_chat.users.models",
        "peekOfCode": "class Users(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, autoincrement=True, nullable=False)\n    email = Column(String, nullable=False, unique=True)\n    phone_number = Column(String, nullable=True, unique=True,)\n    hashed_Password = Column(String, nullable=False)\n    email_verified = Column(Boolean, nullable=False, default=False)\n    phone_verified = Column(Boolean, nullable=False, default=False)\n    email_token_verify = Column(String, nullable=True)\n    phone_token_verify = Column(String, nullable=True)",
        "detail": "anonymous_chat.users.models",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "anonymous_chat.users.models",
        "description": "anonymous_chat.users.models",
        "peekOfCode": "class TokenData():\n    email: str\nclass CustomOAuth2PasswordRequestForm(BaseModel):\n    email_or_Number: Annotated[str, Form(...)]\n    password: Annotated[str, Form(...)]\n    @field_validator('email_or_number')\n    def validate_username(cls, value):\n        try:\n            EmailStr.validate(value)\n            return value",
        "detail": "anonymous_chat.users.models",
        "documentation": {}
    },
    {
        "label": "CustomOAuth2PasswordRequestForm",
        "kind": 6,
        "importPath": "anonymous_chat.users.models",
        "description": "anonymous_chat.users.models",
        "peekOfCode": "class CustomOAuth2PasswordRequestForm(BaseModel):\n    email_or_Number: Annotated[str, Form(...)]\n    password: Annotated[str, Form(...)]\n    @field_validator('email_or_number')\n    def validate_username(cls, value):\n        try:\n            EmailStr.validate(value)\n            return value\n        except ValueError:\n            pass",
        "detail": "anonymous_chat.users.models",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "anonymous_chat.users.routers",
        "description": "anonymous_chat.users.routers",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/user\",\n    tags=[\"Auth & Пользователи\"]\n)\n@router.post(\"/auth/register\")\nasync def register(user: SUserRegister, db: Session = Depends(get_db)):\n    \"\"\"\n    Функция регистрации пользователя. Проверяет существует ли пользователь по почте,\n    если да, возвращает ошибку UserAlreadyExistsException\n    если нет, создает хеш-пароль и передает пользователя в БД",
        "detail": "anonymous_chat.users.routers",
        "documentation": {}
    },
    {
        "label": "SUserRegister",
        "kind": 6,
        "importPath": "anonymous_chat.users.schemas",
        "description": "anonymous_chat.users.schemas",
        "peekOfCode": "class SUserRegister(BaseModel):\n    email: EmailStr\n    password: str\nclass SVerifyPhone(BaseModel):\n    phone_number: str",
        "detail": "anonymous_chat.users.schemas",
        "documentation": {}
    },
    {
        "label": "SVerifyPhone",
        "kind": 6,
        "importPath": "anonymous_chat.users.schemas",
        "description": "anonymous_chat.users.schemas",
        "peekOfCode": "class SVerifyPhone(BaseModel):\n    phone_number: str",
        "detail": "anonymous_chat.users.schemas",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "anonymous_chat.config",
        "description": "anonymous_chat.config",
        "peekOfCode": "class Settings(BaseSettings):\n    MODE: Literal[\"DEV\", \"TEST\", \"PROD\"]\n    LOG_LEVEL: str\n    DB_HOST: str\n    DB_PORT: int\n    DB_USER: str\n    DB_PASS: str\n    DB_NAME: str\n    DATABASE_URL: str = \"\"\n    @field_validator(\"DATABASE_URL\", mode=\"before\")",
        "detail": "anonymous_chat.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "anonymous_chat.config",
        "description": "anonymous_chat.config",
        "peekOfCode": "settings = Settings()",
        "detail": "anonymous_chat.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "anonymous_chat.database",
        "description": "anonymous_chat.database",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass",
        "detail": "anonymous_chat.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "anonymous_chat.database",
        "description": "anonymous_chat.database",
        "peekOfCode": "engine = create_async_engine(DATABASE_URL, **DATABASE_PARAMS)\nasync_session_maker = sessionmaker(\n    bind=engine,\n    class_=AsyncSession,\n    expire_on_commit=False,\n)\n@asynccontextmanager\nasync def get_db() -> AsyncSession:  # type: ignore\n    async with async_session_maker() as session:\n        yield session",
        "detail": "anonymous_chat.database",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "kind": 5,
        "importPath": "anonymous_chat.database",
        "description": "anonymous_chat.database",
        "peekOfCode": "async_session_maker = sessionmaker(\n    bind=engine,\n    class_=AsyncSession,\n    expire_on_commit=False,\n)\n@asynccontextmanager\nasync def get_db() -> AsyncSession:  # type: ignore\n    async with async_session_maker() as session:\n        yield session\nclass Base(DeclarativeBase):",
        "detail": "anonymous_chat.database",
        "documentation": {}
    },
    {
        "label": "UserAlreadyExistException",
        "kind": 5,
        "importPath": "anonymous_chat.Exceptions",
        "description": "anonymous_chat.Exceptions",
        "peekOfCode": "UserAlreadyExistException = HTTPException(\n    status_code=status.HTTP_409_CONFLICT,\n    detail=\"Пользователь уже существует\"\n)\nIncorrectEmailOrPasswordException = HTTPException(\n    status_code=status.HTTP_401_UNAUTHORIZED,\n    detail=\"Неверная почта или пароль\"\n)\nCannotContainUsername = HTTPException(\n    status_code=status.HTTP_401_UNAUTHORIZED,",
        "detail": "anonymous_chat.Exceptions",
        "documentation": {}
    },
    {
        "label": "IncorrectEmailOrPasswordException",
        "kind": 5,
        "importPath": "anonymous_chat.Exceptions",
        "description": "anonymous_chat.Exceptions",
        "peekOfCode": "IncorrectEmailOrPasswordException = HTTPException(\n    status_code=status.HTTP_401_UNAUTHORIZED,\n    detail=\"Неверная почта или пароль\"\n)\nCannotContainUsername = HTTPException(\n    status_code=status.HTTP_401_UNAUTHORIZED,\n    detail=\"Token does not contain username\",\n    headers={\"WWW-Authenticate\": \"Bearer\"},\n)",
        "detail": "anonymous_chat.Exceptions",
        "documentation": {}
    },
    {
        "label": "CannotContainUsername",
        "kind": 5,
        "importPath": "anonymous_chat.Exceptions",
        "description": "anonymous_chat.Exceptions",
        "peekOfCode": "CannotContainUsername = HTTPException(\n    status_code=status.HTTP_401_UNAUTHORIZED,\n    detail=\"Token does not contain username\",\n    headers={\"WWW-Authenticate\": \"Bearer\"},\n)",
        "detail": "anonymous_chat.Exceptions",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "anonymous_chat.main",
        "description": "anonymous_chat.main",
        "peekOfCode": "app = FastAPI(lifespan=lifespan)",
        "detail": "anonymous_chat.main",
        "documentation": {}
    }
]